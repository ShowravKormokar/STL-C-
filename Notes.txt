1. What is STL?
    --> STL (Standard Template Library) is a powerful set of C++ template classes and functions that provide ready-to-use, efficient, and reusable components like containers, algorithms, and iterators to manage data and perform operations on it.

    It’s like a toolbox for C++ programmers to handle data structures and algorithms easily without writing everything from scratch.

2. Types / Parts of STL
    --> STL mainly has 4 components:
    (i) Containers – Used to store collections of data.
        Examples: vector, list, deque, set, map, stack, queue, unordered_map, etc.

    (ii) Algorithms – Predefined functions to perform operations on containers.
        Examples: sort(), find(), reverse(), count(), accumulate(), binary_search()

    (iii) Iterators – Like pointers, used to traverse through containers.
        Examples: begin(), end(), rbegin(), advance(), etc.

    (iv) Function Objects (Functors) – Objects that act like functions and can be passed to algorithms.
        Examples: greater<int>(), less<int>()

3.  Why Use STL in C++?
    ✅ Saves time by using prebuilt, optimized components.
    ✅ Ensures code reusability and readability.
    ✅ STL is generic (works with any data type using templates).
    ✅ Provides robust error handling and reduces bugs.
    ✅ STL containers and algorithms are highly efficient and well-tested.

4. Real-Life Use Case Example
    📦 E-commerce System (like Amazon):
        -> Use map<string, int> to store product name and quantity.
        -> Use priority_queue to manage product delivery order.
        -> Use vector to store user search history and sort it using sort().

    💬 Messaging App (like WhatsApp):
        -> Use unordered_map<int, list<string>> to store user messages by user ID.
        -> Use queue to handle real-time notifications.

5. Advantages of STL
    Advantage	          Description
    🔁 Reusability	 --   Write once, use for any data type
    🧠 Efficiency	 --   Uses well-optimized internal algorithms
    🔍 Standardized	 --   Part of the C++ Standard Library
    ⏱ Time-saving	 --   Predefined components reduce development time
    🔧 Flexibility	 --   Easily combine containers and algorithms

6. Disadvantages of STL
    Disadvantage	           Description
    🧩 Complexity	 --       Syntax can be hard for beginners (e.g., iterators, templates)
    🐞 Harder Debugging	 --   Template errors can be cryptic
    📦 Overhead	     --       May add performance overhead in real-time systems
    ❌ Not Thread-Safe	--   STL containers are not thread-safe by default